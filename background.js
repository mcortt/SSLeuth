// Use 'var' to make this object globally accessible to the popup.
var tabSecurityInfo = {};

function fetchSecurityInfo(details) {
  // We only care about requests for the main document of a tab.
  if (details.type !== "main_frame") {
    return;
  }

  // We return the promise generated by getSecurityInfo.
  return browser.webRequest.getSecurityInfo(details.requestId, {
    // **REMOVED:** The invalid "subjectPublicKeyInfo: true" option is gone.
    certificateChain: true
  }).then(securityInfo => {
    // Once the info is fetched, store it.
    tabSecurityInfo[details.tabId] = securityInfo;
  }).catch(error => {
    console.error(`Error fetching security info for tab ${details.tabId}:`, error);
    delete tabSecurityInfo[details.tabId];
  });
}

// Add the listener.
browser.webRequest.onHeadersReceived.addListener(
  fetchSecurityInfo,
  { urls: ["<all_urls>"] },
  // This flag is required to handle the async listener.
  ["blocking"]
);

// Clean up stored data when a tab is closed.
browser.tabs.onRemoved.addListener((tabId) => {
  delete tabSecurityInfo[tabId];
});